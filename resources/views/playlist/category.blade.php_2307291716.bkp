@extends('adminlte::page')

@section('title', 'Dashboard')

@section('content_header')
<title>Vue.js + Bootstrap Example</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="http://vjs.zencdn.net/4.12/video-js.css" rel="stylesheet">
<script src="http://vjs.zencdn.net/4.12/video.js"></script>
<link href="http://tetzank.github.io/videojs-snapshot/videojs-snapshot.min.css" rel="stylesheet" type="text/css" />
<script src="http://tetzank.github.io/videojs-snapshot/videojs-snapshot.min.js"></script>
@stop

@section('content')

<div id="app" class="container-fluid">
    <div class="row">
        <div class="col-lg-3 col-6">
            <course-list :initial-courses="courses" @update-videos="updateVideos"></course-list>
            <video-accordion :videos="videos" v-if="selectedCourse" @video-selected="onVideoSelected"></video-accordion>
        </div>
        <div class="col-lg-9 col-12">
            <video id="my-video" class="video-js vjs-default-skin vjs-big-play-centered" controls="controls" preload="auto" width="100%" height="90%">
                <source id="video-source" type="video/mp4">
                <p class="vjs-no-js">To view this video please enable JavaScript, and consider upgrading to a web browser that <a href="http://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a></p>
            </video>
            <p>Choose mp4 files:</p>
            <input type="file" id="files" name="files[]" accept="video/mp4" />
            <hr />
        </div>
    </div>
</div>

<template id="course-list-template">
    <div class="course-list scrollable" style="height: 40vh; overflow: auto;">
        <div class="card" style="width: 18rem;" v-for="course in courses" :key="course.id">
            <img :src="course.thumbnail" class="card-img-top" alt="Course Thumbnail">
            <div class="card-body">
                <h5 class="card-title">@{{ course.title }}</h5>
                <p class="card-text">@{{ course.description }}</p>
                <button class="btn btn-primary" @click="selectCourse(course)">Open Course</button>
                <button class="btn btn-danger" @click="deleteCourse(course.id)">Delete Course</button>
            </div>
        </div>
    </div>
</template>


<template id="video-accordion-template">
    <div class="accordion" id="videoAccordion" style="height: 40vh; overflow: auto;">
        <div class="accordion-item" v-for="(video, index) in videos" :key="video.id">
            <h2 class="accordion-header">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" :data-bs-target="'#collapse'+video.id" @click="loadVideo(video)">
                    @{{ video.title }}
                </button>
            </h2>
            <div :id="'collapse'+video.id" class="accordion-collapse collapse" data-bs-parent="#videoAccordion">
                <div class="accordion-body">
                    <chapter-list :chapters="video.chapters" :video-id="video.id"></chapter-list>
                </div>
            </div>
        </div>
    </div>
</template>


<template id="chapter-list-template">
    <div>
        <ul class="list-group">
            <li class="list-group-item" v-for="chapter in chapters" :key="chapter.label">
                <span class="badge bg-secondary" @{{ chapter.time }}</span>
                    @{{ chapter.label }}
            </li>
        </ul>
        <form @submit="addChapter">
            <div class="mb-3">
                <label for="chapterTimeInput" class="form-label">Chapter Time</label>
                <input type="text" class="form-control" id="chapterTimeInput" v-model="newChapter.time">
            </div>
            <div class="mb-3">
                <label for="chapterLabelInput" class="form-label">Chapter Label</label>
                <input type="text" class="form-control" id="chapterLabelInput" v-model="newChapter.label">
            </div>
            <input type="hidden" v-model="newChapter.videoId">
            <button type="submit" class="btn btn-primary">Add Chapter</button>
        </form>
    </div>
</template>

<script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios@0.26.1/dist/axios.min.js"></script>

<script>
    Vue.component('video-accordion', {
        props: ['videos'],
        template: '#video-accordion-template' // Correção aqui

    });

    Vue.component('chapter-list', {
        props: ['chapters', 'videoId'],
        data: function() {
            return {
                newChapter: {
                    time: '',
                    label: '',
                    videoId: this.videoId
                }
            }
        },
        methods: {
            getCurrentTime: function() {
                return Math.floor(Date.now() / 1000);
            },
            addChapter: function(event) {
                event.preventDefault();
                this.newChapter.time = this.getCurrentTime();
                axios.post('http://turbotuts-nestedset.test/api/marker', {
                    time: this.newChapter.time,
                    label: this.newChapter.label,
                    video_Id: this.newChapter.videoId
                }).then(response => {
                    this.chapters.push(response.data.marker);
                    this.newChapter = {
                        time: '',
                        label: '',
                        videoId: this.videoId
                    };
                }).catch(error => console.log(error));
            }
        },
        template: '#chapter-list-template'
    });

    Vue.component('course-list', {
        props: {
            initialCourses: {
                type: Array,
                default: function() {
                    return [];
                }
            },
        },
        template: '#course-list-template',
        data: function() {
            return {
                selectedCourse: [],
                courses: Array.from(this.initialCourses), // Copies initialCourses into data
            };
        },
        methods: {
            selectCourse: function(course) {


                axios.get(`http://turbotuts-nestedset.test/api/video/${course.id}`)
                    .then(response => {
                        console.log("Dados do curso recebidos:", response.data);
                        this.selectedCourse = response.data;
                        this.videos = this.selectedCourse;
                        this.$emit('course-selected', this.selectedCourse);
                        this.$emit('update-videos', this.selectedCourse);

                    })
                    .catch(error => console.log("Erro ao carregar curso:", error));
            },
            deleteCourse: function(courseId) {
                axios.delete('http://turbotuts-nestedset.test/api/course/' + courseId)
                    .then(response => {
                        this.courses = this.courses.filter(course => course.id !== courseId);
                    })
                    .catch(error => console.log(error));
            }
        },
        mounted: function() {
            axios.get('http://turbotuts-nestedset.test/api/categoryjson/{{$playlistId}}')
                .then(response => (this.courses = response.data))
                .catch(error => console.log(error));
        }
    });


    new Vue({
        el: '#app',
        data: {
            courses: [],
            selectedCourse: [],
            videos: [],
            selectedVideo: null
        },
        methods: {
            updateVideos(videos) { // Defina este método
                this.videos = videos;
            },
            onVideoSelected(video) {
                this.selectedVideo = video;
                var player = videojs('my-video');
                player.src({
                    type: "video/mp4",
                    src: video.url
                });
                player.play().catch(error => alert(`Error playing video: ${error.message}`));
            }
        },
        mounted: function() {
            // código existente aqui
        }
    });
</script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
    var player = videojs('my-video');
    player.snapshot();

    document.getElementById('files').addEventListener('change', function(event) {
        var file = event.target.files[0];
        player.src({
            type: "video/mp4",
            src: URL.createObjectURL(file)
        });
    }, false);
</script>
@stop

@section('css')
<!-- {{-- <link rel="stylesheet" href="/css/admin_custom.css"> --}} -->

@stop

@section('js')

@stop